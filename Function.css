
  üöÄ Gi·ªõi thi·ªáu v·ªÅ H√†m (Function) trong JavaScript 
  üîπ H√†m l√† g√¨?
H√†m (function) l√† m·ªôt kh·ªëi m√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ƒë·ªÉ th·ª±c hi·ªán m·ªôt nhi·ªám v·ª• c·ª• th·ªÉ.
üí° B·∫°n c√≥ th·ªÉ vi·∫øt m·ªôt h√†m m·ªôt l·∫ßn v√† d√πng l·∫°i nhi·ªÅu l·∫ßn!
1. C√°ch t·∫°o h√†m trong JavaScript
üìå C√°ch 1: H√†m c∆° b·∫£n (Function Declaration)
function sayHello() {
  console.log("Xin ch√†o!");
}

sayHello(); // G·ªçi h√†m ‚Üí K·∫øt qu·∫£: Xin ch√†o!
üîπ Gi·∫£i th√≠ch:

function sayHello() {}: T·∫°o m·ªôt h√†m c√≥ t√™n sayHello.

console.log("Xin ch√†o!");: Khi g·ªçi h√†m, n√≥ s·∫Ω in "Xin ch√†o!" l√™n m√†n h√¨nh.

sayHello();: G·ªçi h√†m ƒë·ªÉ th·ª±c thi.

üìå C√°ch 2: H√†m c√≥ tham s·ªë (Function with Parameters)

function greet(name) {
  console.log("Xin ch√†o, " + name + "!");
}

greet("Nam");  // K·∫øt qu·∫£: Xin ch√†o, Nam!
greet("Lan");  // K·∫øt qu·∫£: Xin ch√†o, Lan!
üîπ Gi·∫£i th√≠ch:

name l√† tham s·ªë ‚Üí Khi g·ªçi h√†m, b·∫°n truy·ªÅn v√†o gi√° tr·ªã "Nam" ho·∫∑c "Lan".

[[][]NOTE:
name l√† THAM S·ªê ƒê·∫†I DI·ªÜN  sinh ra khi khai b√°o h√†m. n·∫±m trong d·∫•u ()
(ng·∫ßm hi·ªÉu ƒëang c√≥ 1 bi·∫øn name ƒëc kh·ªüi t·∫°o l√†m tham s·ªë ƒë·∫°i di·ªán)

"Nam" l√† ƒê·ªêI S·ªê TH·ª∞C T·∫æ ƒë∆∞·ª£c truy·ªÅn v√†o ƒë·ªÉ th·ª±c thi h√†m


üìå C√°ch 3: H√†m c√≥ gi√° tr·ªã tr·∫£ v·ªÅ (return)
function add(a, b) {
  return a + b;
}

let result = add(5, 3);
console.log(result); // K·∫øt qu·∫£: 8
üîπ Gi·∫£i th√≠ch:

return a + b; ‚Üí Tr·∫£ v·ªÅ k·∫øt qu·∫£ c·ªßa ph√©p c·ªông.

let result = add(5, 3); ‚Üí L∆∞u k·∫øt qu·∫£ tr·∫£ v·ªÅ v√†o bi·∫øn result.

üìå C√°ch 4: H√†m m≈©i t√™n (Arrow Function) - C√°ch vi·∫øt g·ªçn h∆°n
const multiply = (a, b) => a * b;

console.log(multiply(4, 2)); // K·∫øt qu·∫£: 8

üî• T√≥m l·∫°i
C√°ch d√πng	          C√∫ ph√°p           	                  ƒê·∫∑c ƒëi·ªÉm
H√†m c∆° b·∫£n	      function sayHello() {}	                D√πng khi c·∫ßn ƒë·∫∑t t√™n cho h√†m
H√†m c√≥ tham s·ªë	  function greet(name) {}        	Nh·∫≠n d·ªØ li·ªáu t·ª´ b√™n ngo√†i
H√†m c√≥ return	    function add(a, b){ return a + b;}	  r·∫£ v·ªÅ k·∫øt qu·∫£ ƒë·ªÉ s·ª≠ d·ª•ng ti·∫øp
H√†m m≈©i t√™n	      const func = (a, b) => a + b;	          Vi·∫øt g·ªçn h∆°n, ti·ªán d√πng v·ªõi callback





üöÄ T·ª´ kh√≥a return trong JavaScript
[[[[M·ªñI KHI MU·ªêN TR·∫¢ V·ªÄ K·∫æT QU·∫¢ N√ÄO ƒê√ì M√Ä KH√îNG TH·ª∞C HI·ªÜN T√ÅC V·ª§ C·ª§ TH·ªÇ

üîπ1. return l√† g√¨?
  return ƒë∆∞·ª£c d√πng trong h√†m ƒë·ªÉ tr·∫£ v·ªÅ m·ªôt gi√° tr·ªã v√† k·∫øt th√∫c h√†m ngay l·∫≠p t·ª©c.

üìå V√≠ d·ª• ƒë∆°n gi·∫£n:
  function sum(a, b) {
    return a + b; // Tr·∫£ v·ªÅ k·∫øt qu·∫£ c·ªßa ph√©p c·ªông
  }
  let result = sum(5, 3);
  console.log(result); // K·∫øt qu·∫£: 8

üîπ Gi·∫£i th√≠ch:
  return a + b; ‚Üí Tr·∫£ v·ªÅ k·∫øt qu·∫£ ph√©p c·ªông (5 + 3 = 8).
  result nh·∫≠n gi√° tr·ªã t·ª´ return v√† in ra m√†n h√¨nh.

üîπ 2. return gi√∫p l·∫•y d·ªØ li·ªáu t·ª´ h√†m
  N·∫øu m·ªôt h√†m kh√¥ng c√≥ return, n√≥ s·∫Ω tr·∫£ v·ªÅ undefined.

üìå V√≠ d·ª• h√†m KH√îNG c√≥ return:
  function sayHello() {
    console.log("Xin ch√†o!");
  }
  let message = sayHello();
  console.log(message); // K·∫øt qu·∫£: undefined


üîπ 3. return k·∫øt th√∫c h√†m ngay l·∫≠p t·ª©c
  Sau return, m·ªçi d√≤ng code ph√≠a d∆∞·ªõi s·∫Ω kh√¥ng ch·∫°y n·ªØa.


  üîπ 4. D√πng return v·ªõi ƒëi·ªÅu ki·ªán (if)
  B·∫°n c√≥ th·ªÉ d√πng return ƒë·ªÉ k·∫øt th√∫c h√†m s·ªõm n·∫øu g·∫∑p ƒëi·ªÅu ki·ªán n√†o ƒë√≥.

üìå V√≠ d·ª• ki·ªÉm tra s·ªë ch·∫µn/l·∫ª:

function isEven(number) {
  if (number % 2 === 0) {
      return true; // Tr·∫£ v·ªÅ true n·∫øu s·ªë ch·∫µn
  }
  return false; // N·∫øu kh√¥ng, tr·∫£ v·ªÅ false
}
console.log(isEven(4)); // K·∫øt qu·∫£: true
console.log(isEven(7)); // K·∫øt qu·∫£: false




üöÄ Bi·ªÉu th·ª©c h√†m (Function Expression) trong JavaScript l√† c√°ch khai b√°o h√†m b·∫±ng c√°ch g√°n n√≥ cho m·ªôt bi·∫øn.
[G·ªåI ƒê∆†N GI·∫¢N L√Ä ƒê·∫∂T T√äN BI·∫æN CHO H√ÄM ƒê·ªÇ KHI G·ªåI T√äN BI·∫æN TH√å H√ÄM TH·ª∞C THI

üîπ C√∫ ph√°p ƒë∆°n gi·∫£n:
const sayHello = function() {
  console.log("Hello!");
};
sayHello(); // G·ªçi h√†m

üîπ Gi·∫£i th√≠ch d·ªÖ hi·ªÉu:
function() { console.log("Hello!"); } l√† m·ªôt h√†m ·∫©n danh (kh√¥ng c√≥ t√™n).
G√°n h√†m n√†y cho bi·∫øn sayHello.
Khi c·∫ßn d√πng, ch·ªâ c·∫ßn g·ªçi sayHello().

üëâ Kh√°c v·ªõi function declaration (h√†m th√¥ng th∆∞·ªùng), function expression kh√¥ng th·ªÉ g·ªçi tr∆∞·ªõc khi khai b√°o.

V√≠ d·ª•:
console.log(add(2, 3)); // ‚ùå L·ªói! Kh√¥ng th·ªÉ g·ªçi tr∆∞·ªõc khi khai b√°o.
const add = function(a, b) {
    return a + b;
};
console.log(add(2, 3)); // ‚úÖ K·∫øt qu·∫£: 5


IIFE (Immediately Invoked Function Expression) l√† m·ªôt bi·ªÉu th·ª©c h√†m t·ª± g·ªçi ngay sau khi ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a.

üîπ C√∫ ph√°p ƒë∆°n gi·∫£n:
(function(name) {
  console.log("Hello", name);
})("Nam");  // "Hello Nam"




[üî•! Higher Order Function (HOF) l√† g√¨?
HOF l√† h√†m nh·∫≠n m·ªôt h√†m kh√°c l√†m tham s·ªë ho·∫∑c tr·∫£ v·ªÅ m·ªôt h√†m kh√°c.

üí° V√≠ d·ª• d·ªÖ hi·ªÉu nh·∫•t:
function sayHello() {
  return "Hello!";
}
  function greet(func) {
    console.log(func()); 
}
// Truy·ªÅn h√†m sayHello v√†o greet
greet(sayHello); // Output: "Hello!"

üëâ ·ªû ƒë√¢y, greet l√† Higher Order Function v√¨ n√≥ nh·∫≠n m·ªôt h√†m kh√°c (sayHello) l√†m tham s·ªë.


üîπ ·ª®ng d·ª•ng th·ª±c t·∫ø c·ªßa HOF
  ‚úÖ Duy·ªát m·∫£ng v·ªõi map (HOF ph·ªï bi·∫øn)
  D√πng ƒë·ªÉ t·∫°o m·ªôt m·∫£ng m·ªõi b·∫±ng c√°ch √°p d·ª•ng m·ªôt h√†m l√™n t·ª´ng ph·∫ßn t·ª≠ c·ªßa m·∫£ng c≈©.

  let numbers = [1, 2, 3];
  let doubled = numbers.map(num => num * 2);
  console.log(doubled); // Output: [2, 4, 6]

  ‚úÖ L·ªçc m·∫£ng v·ªõi filter
  Tr·∫£ v·ªÅ m·ªôt m·∫£ng m·ªõi ch·ªâ ch·ª©a c√°c ph·∫ßn t·ª≠ th·ªèa m√£n ƒëi·ªÅu ki·ªán.

  let nums = [1, 2, 3, 4];
  let evens = nums.filter(n => n % 2 === 0);
  console.log(evens); // Output: [2, 4]

  ‚úÖ T√≠nh t·ªïng v·ªõi reduce
  Gi·∫£m m·∫£ng th√†nh m·ªôt gi√° tr·ªã duy nh·∫•t.
C√≥ th·ªÉ g·ªçi l√† h√†m t√≠ch l≈©y

  let sum = numbers.reduce((acc, num) => acc + num, 0);
  console.log(sum); // Output: 6


  üöÄ Ph∆∞∆°ng th·ª©c forEach()
  forEach() l√† m·ªôt ph∆∞∆°ng th·ª©c c·ªßa m·∫£ng gi√∫p l·∫∑p qua t·ª´ng ph·∫ßn t·ª≠ trong m·∫£ng v√† th·ª±c hi·ªán m·ªôt h√†nh ƒë·ªông n√†o ƒë√≥.

  üìå C√∫ ph√°p:
      array.forEach(function(element, index, array) {
        // Code th·ª±c thi v·ªõi t·ª´ng ph·∫ßn t·ª≠
    });
    element: Gi√° tr·ªã c·ªßa t·ª´ng ph·∫ßn t·ª≠ trong m·∫£ng.

    index (tu·ª≥ ch·ªçn): V·ªã tr√≠ (ch·ªâ s·ªë) c·ªßa ph·∫ßn t·ª≠ trong m·∫£ng.

    array (tu·ª≥ ch·ªçn): Ch√≠nh m·∫£ng g·ªëc ƒëang ƒë∆∞·ª£c duy·ªát.

    V√≠ d·ª• ƒë∆°n gi·∫£n
    üìå L·∫∑p qua m·∫£ng v√† in t·ª´ng ph·∫ßn t·ª≠
    let numbers = [1, 2, 3, 4];

    numbers.forEach(function(num) {
        console.log(num);
    });
    // k·∫øt qu·∫£:   
              1
              2
              3
              4
            üöÄ Gi·∫£i th√≠ch:

forEach() l·∫•y t·ª´ng ph·∫ßn t·ª≠ (num) trong m·∫£ng numbers v√† in ra.


    ‚úÖ  D√πng forEach() v·ªõi index
    üìå V√≠ d·ª•: Hi·ªÉn th·ªã c·∫£ gi√° tr·ªã v√† ch·ªâ s·ªë
      let fruits = ["T√°o", "Cam", "Chu·ªëi"];

  fruits.forEach(function(fruit, index) {
      console.log(`V·ªã tr√≠ ${index}: ${fruit}`);
  });
      üîπ K·∫øt qu·∫£:
      V·ªã tr√≠ 0: T√°o
      V·ªã tr√≠ 1: Cam
      V·ªã tr√≠ 2: Chu·ªëi

      üöÄ Gi·∫£i th√≠ch:
      index l·∫•y s·ªë th·ª© t·ª± c·ªßa t·ª´ng ph·∫ßn t·ª≠ trong m·∫£ng.

      ‚úÖ  DD√πng forEach() v·ªõi Arrow Function (=>)
      üìå C√°ch vi·∫øt g·ªçn h∆°n v·ªõi arrow function
      let numbers = [2, 4, 6];
    numbers.forEach(num => console.log(num * 2));
    üîπ K·∫øt qu·∫£:
        4
        8
       12

       ‚úÖ 6. forEach() KH√îNG tr·∫£ v·ªÅ gi√° tr·ªã (return kh√¥ng ho·∫°t ƒë·ªông)
    üìå V√≠ d·ª• sai khi d√πng return trong forEach()
    let numbers = [1, 2, 3];
    let result = numbers.forEach(num => {
        return num * 2; 
    });
     console.log(result); // K·∫øt qu·∫£: undefined ‚ùå

     üöÄ Gi·∫£i th√≠ch:
     forEach() kh√¥ng tr·∫£ v·ªÅ m·∫£ng m·ªõi.
      N·∫øu mu·ªën t·∫°o m·∫£ng m·ªõi, h√£y d√πng .map() thay v√¨ forEach().
      üìå C√°ch ƒë√∫ng: D√πng .map() ƒë·ªÉ tr·∫£ v·ªÅ m·∫£ng m·ªõi
      let doubled = numbers.map(num => num * 2);
      sole.log(doubled); // K·∫øt qu·∫£: [2, 4, 6] 

    
      CH·ªà D√ôNG FOR..EACH CHO VI·ªÜC LOG RA GI√Å TR·ªä V√Ä V·ªä TR√ç
      KH√îNG TR·∫¢ V·ªÄ M·∫¢NG M·ªöI N√äN KHI LOG RA K·∫æT QU·∫¢ UNDEFINED



  ‚úÖ7. .MAP 
          .map() l√† m·ªôt ph∆∞∆°ng th·ª©c c·ªßa m·∫£ng trong JavaScript, gi√∫p duy·ªát qua t·ª´ng ph·∫ßn t·ª≠ c·ªßa m·∫£ng v√† tr·∫£ v·ªÅ m·ªôt m·∫£ng m·ªõi sau khi th·ª±c hi·ªán m·ªôt h√†m n√†o ƒë√≥ tr√™n t·ª´ng ph·∫ßn t·ª≠. qua PH∆Ø∆†NG TH·ª®C RETURN
          Kh√¥ng ho·∫°t ƒë·ªông tr√™n m·∫£ng r·ªóng:
         N·∫øu m·∫£ng r·ªóng, map s·∫Ω tr·∫£ v·ªÅ m·ªôt m·∫£ng r·ªóng m·ªõi.

         let numbers = [1, 2, 3, 4, 5, 6];
       let arr =  numbers.map(function(element, index){
          return element +10;
         })
         console.log(arr);   // [11, 12 , 13, 14, 15, 16]
         let arr = NUMBER.MAP(EL => EL+10){
         console.log(arr);   // [11, 12 , 13, 14, 15, 16]

         }


    FOR..EACH TH√å DUY·ªÜT QUA M·∫¢NG V√Ä TH·ª∞C THI H√ÄM CALLBACK NH∆ØNG KH√îNG TR·∫¢ V·ªÄ GI√Å TR·ªä
    .MAP TH√å V·ª™A TH·ª∞C THI V·ª™A TR·∫¢ V·ªÄ GI√Å TR·ªä

        forEach: Duy·ªát qua t·ª´ng ph·∫ßn t·ª≠ c·ªßa m·∫£ng v√† th·ª±c thi h√†m callback, nh∆∞ng kh√¥ng tr·∫£ v·ªÅ gi√° tr·ªã (k·∫øt qu·∫£ l√† undefined).
        map: C≈©ng duy·ªát qua t·ª´ng ph·∫ßn t·ª≠ c·ªßa m·∫£ng, nh∆∞ng c√≥ tr·∫£ v·ªÅ m·ªôt m·∫£ng m·ªõi ch·ª©a k·∫øt qu·∫£ c·ªßa h√†m callback.

  ‚úÖ8. .FILLTER
  filter th√¨ duy·ªát qua t·ª´ng ph·∫ßn t·ª≠ c·ªßa m·∫£ng v√† tr·∫£ v·ªÅ m·ªôt m·∫£ng m·ªõi ch·ª©a c√°c ph·∫ßn t·ª≠ th·ªèa m√£n ƒëi·ªÅu ki·ªán do h√†m callback x√°c ƒë·ªãnh.
  ƒêI·ªÄU KI·ªÜN ƒê·ªÇ L·ªåC L√Ä G√å TH√å ƒê·∫∂T SAU RETURN

  üí° V√≠ d·ª• filter:
  let numbers = [1, 2, 3, 4, 5, 6];
  let result = numbers.filter(function(element, index){
    return element % 2 ===0;
  })
console.log(result); // [2, 4, 6]




           
üìç 2. ƒê·ªá quy (recursion) l√† g√¨?
üëâ ƒê·ªá quy l√† m·ªôt h√†m t·ª± g·ªçi l·∫°i ch√≠nh n√≥, ƒë·ªÉ l·∫∑p l·∫°i m·ªôt c√¥ng vi·ªác cho ƒë·∫øn khi ƒë·∫°t ƒëi·ªÅu ki·ªán d·ª´ng.

    üîß V√≠ d·ª• ƒë∆°n gi·∫£n:
    javascript

    function countDown(number) {
        if (number === 0) {
            console.log("H·∫øt gi·ªù!");
            return;
        }
        console.log(number);
        countDown(number - 1); // G·ªçi l·∫°i ch√≠nh n√≥
    }

    countDown(3);
    // üëâ In ra:
    // 3
    // 2
    // 1
    // H·∫øt gi·ªù!
    üí° Hi·ªÉu n√¥m na:
    H√†m t·ª± g·ªçi l·∫°i ch√≠nh n√≥ ƒë·ªÉ l√†m vi·ªác l·∫∑p ƒëi l·∫∑p l·∫°i.

    C·∫ßn c√≥ ƒëi·ªÅu ki·ªán d·ª´ng ƒë·ªÉ tr√°nh g·ªçi m√£i kh√¥ng d·ª´ng (g√¢y l·ªói).
